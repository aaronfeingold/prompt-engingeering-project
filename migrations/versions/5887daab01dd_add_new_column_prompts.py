"""Add new column prompts

Revision ID: 5887daab01dd
Revises: c3fd095f18a2
Create Date: 2024-07-23 15:02:39.689556

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column, select, bindparam
import json

# revision identifiers, used by Alembic.
revision = "5887daab01dd"
down_revision = "c3fd095f18a2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("prompts", postgresql.JSONB(astext_type=sa.Text()), nullable=True)
        )

    # ### end Alembic commands ###
    # migrate data from 'prompt' to 'prompts'
    # Use SQLAlchemy's table and column to access and update the data
    prompt_response = table(
        "prompt_response",
        column("id", sa.Integer),
        column("prompt", sa.String),
        column("prompts", postgresql.JSONB),
    )
    # Bind the connection
    conn = op.get_bind()

    # use a batch approach to update the data
    def migrate_prompt_data(batch_size=1000):
        offset = 0
        while True:
            results = (
                conn.execute(
                    select(prompt_response.c.id, prompt_response.c.prompt)
                    .limit(batch_size)
                    .offset(offset)
                )
                .mappings()
                .fetchall()
            )

            if not results:
                break

            updates = []
            for row in results:
                try:
                    # try to load the json
                    json_prompts = json.loads(row["prompt"])
                except json.JSONDecodeError:
                    # if not a json, create a new json object, default to role user
                    json_prompts = [{"role": "user", "content": row["prompt"]}]
                updates.append(
                    {
                        "b_id": row["id"],
                        "prompts": json_prompts,
                    }
                )
            if updates:
                conn.execute(
                    prompt_response.update()
                    .where(prompt_response.c.id == bindparam("b_id"))
                    .values(prompts=bindparam("prompts")),
                    updates,
                )

            offset += batch_size

    migrate_prompt_data()

    # After data migration, set the 'prompts' column to not nullable
    op.alter_column("prompt_response", "prompts", nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.drop_column("prompts")

    # ### end Alembic commands ###
