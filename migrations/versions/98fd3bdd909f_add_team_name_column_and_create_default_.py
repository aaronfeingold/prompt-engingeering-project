"""Add team_name column and create default team if none, add dummy users to dummy team if developing

Revision ID: 98fd3bdd909f
Revises: cdba6c51ae4d
Create Date: 2024-08-12 15:35:52.145518

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer


# revision identifiers, used by Alembic.
revision = "98fd3bdd909f"
down_revision = "cdba6c51ae4d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("team_name", sa.String(length=80), nullable=False)
        )
        batch_op.create_unique_constraint(None, ["team_name"])

    # ### end Alembic commands ###
    conn = op.get_bind()
    teams_table = table("teams", column("id", Integer), column("team_name", String))
    users_table = table("users", column("id", Integer))

    # Check if any teams exist
    result = conn.execute(sa.select(teams_table.c.id))
    if result.rowcount == 0:
        # If no, then create default team
        conn.execute(teams_table.insert().values(team_name="Default Team"))

        # Get the ID of the default team
        default_team_id = conn.execute(
            sa.select(teams_table.c.id).where(teams_table.c.team_name == "Default Team")
        ).scalar()

        # Get the first 4 users' IDs
        user_ids = [
            row[0]
            for row in conn.execute(sa.select(users_table.c.id).limit(4)).fetchall()
        ]
        # Insert user-team associations
        if user_ids:
            team_users_table = table(
                "teammates", column("team_id", Integer), column("user_id", Integer)
            )
            conn.execute(
                team_users_table.insert(),
                [
                    {"team_id": default_team_id, "user_id": user_id}
                    for user_id in user_ids
                ],
            )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="unique")
        batch_op.drop_column("team_name")

    # ### end Alembic commands ###
