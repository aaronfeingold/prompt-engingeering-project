"""PromptResponse table foreign key relationship to User table

Revision ID: 9c35d26d3f60
Revises: c5bf0fbb8979
Create Date: 2024-08-07 18:07:01.893559

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "9c35d26d3f60"
down_revision = "c5bf0fbb8979"
branch_labels = None
depends_on = None


def upgrade():
    # Step 1: Add user_id column as nullable
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.add_column(sa.Column("user_id", sa.Integer(), nullable=True))

    # Step 2: Create a default user with information for each column

    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM users WHERE id = 1) THEN
                INSERT INTO users (id, username, email, date_created)
                VALUES (1, 'default_user', 'default@example.com', NOW());
            END IF;
        END
        $$;
        """
    )

    # Step 3: Populate user_id column with the default user's ID where it is null
    op.execute("UPDATE prompt_response SET user_id = 1 WHERE user_id IS NULL")

    # Step 4: Alter user_id column to be non-nullable
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.Integer(), nullable=False)

    # Step 5: Create the foreign key constraint
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.create_foreign_key(None, "users", ["user_id"], ["id"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("prompt_response", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="foreignkey")
        batch_op.drop_column("user_id")

    # ### end Alembic commands ###
